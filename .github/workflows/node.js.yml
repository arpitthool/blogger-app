name: Node.js CI
on:
  push:
    branches: [ "master" ]
jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    
    # Check and Install Node.js and npm if not present
    - name: Check and Install Node.js and npm
      run: |
        if ! command -v npm &> /dev/null; then
          echo "npm not found. Installing Node.js and npm..."
          sudo apt install npm
        else
          echo "npm is already installed"
          npm --version
        fi
    
    # Check and Install PostgreSQL if not present
    - name: Check and Install PostgreSQL
      run: |
        if ! command -v psql &> /dev/null; then
          echo "PostgreSQL not found. Installing..."
          sudo apt install -y postgresql postgresql-contrib
        else
          echo "PostgreSQL is already installed"
          psql --version
        fi
    
    # Start PostgreSQL service (only if not already running)
    - name: Start PostgreSQL service
      run: |
        if ! sudo systemctl is-active --quiet postgresql; then
          echo "Starting PostgreSQL service..."
          sudo systemctl start postgresql.service
        else
          echo "PostgreSQL service is already running"
        fi
        sudo systemctl status postgresql.service

    # Setup PostgreSQL database and user (if not exists)
    - name: Setup PostgreSQL and run initial seeder
      run: |
        # Check if database exists
        DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='postgres'" | grep -q 1 && echo "yes" || echo "no")
        
        if [ "$DB_EXISTS" = "no" ]; then
          echo "Database 'postgres' does not exist. Creating..."
          sudo -u postgres psql -c "CREATE DATABASE postgres;"
          
          # Flag to indicate we need to run the seeder
          echo "NEED_SEEDING=true" >> $GITHUB_ENV
        else
          echo "Database 'postgres' already exists"
          echo "NEED_SEEDING=false" >> $GITHUB_ENV
        fi
        
        if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='postgres'" | grep -q 1; then
          sudo -u postgres psql -c "CREATE USER postgres WITH ENCRYPTED PASSWORD 'password';"
        else
          sudo -u postgres psql -c "ALTER USER postgres WITH ENCRYPTED PASSWORD 'password';"
        fi
        
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE postgres TO postgres;"

    # Setup Node.js
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    # Check and Install PM2 if not present
    - name: Check and Install PM2
      run: |
        if ! command -v pm2 &> /dev/null; then
          echo "PM2 not found. Installing..."
          sudo npm i -g pm2
        else
          echo "PM2 is already installed"
          pm2 --version
        fi
    
    # Application build steps
    - run: npm ci
    - run: node ace migration:run
    # Run seeder only if database was newly created
    - name: Run seeder if needed
      run: |
        if [ "$NEED_SEEDING" = "true" ]; then
          echo "Running database seeder..."
          node ace db:seed
        else
          echo "Skipping seeder as database already existed"
        fi
    - run: node ace build --production
    - run: cp .env build/
    - name: Install production dependencies
      run: npm ci --production
      working-directory: ./build
    - name: Deploy with PM2
      working-directory: ./build
      run: |
        # if pm2 list | grep -q "server"; then
        #   echo "Server process exists, restarting..."
        #   pm2 restart server
        # else
        #   echo "Server process not found, starting new instance..."
        #   pm2 start server.js
        # fi

        if pm2 describe server > /dev/null 2>&1; then
          echo "Server process exists, restarting..."
          pm2 restart server
        else
          echo "Server process not found, starting new instance..."
          pm2 start server.js --name server
        fi
